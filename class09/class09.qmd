---
title: "Class 09: Halloween Mini-Project"
author: "Christopher Brockie (PID: A16280405)"
format: pdf
---

In this mini-project, you will explore FiveThirtyEight’s Halloween Candy dataset. Your task is to explore their candy dataset to find out answers to all types of questions about surveyers' favorite types of candy.

## Importing Candy Data

Load up and inspect candy data:
```{r}
candy_file <- "candy-data.csv"

candy = read.csv("candy-data.csv", row.names=1)
head(candy)
```

> Q1. How many different candy types are in this dataset?

```{r}
nrow(candy)
```

> Q2. How many fruity candy types are in the dataset?

```{r}
sum(candy[,"fruity"])
```

## What is your favorite candy

One of the most interesting variables in the dataset is winpercent. For a given candy this value is the percentage of people who prefer this candy over another randomly chosen candy from the dataset (what 538 term a matchup). Higher values indicate a more popular candy.

Let's look at Twix:
```{r}
candy["Twix", ]$winpercent
```

> Q3. What is your favorite candy in the dataset and what is it’s winpercent value?

```{r}
candy["Snickers", ]$winpercent
```

> Q4. What is the winpercent value for “Kit Kat”?

```{r}
candy["Kit Kat", ]$winpercent
```

> Q5. What is the winpercent value for “Tootsie Roll Snack Bars”?

```{r}
candy["Tootsie Roll Snack Bars", ]$winpercent
```

There is a useful skim() function in the skimr package that can help give you a quick overview of a given dataset. Let’s install this package and try it on our candy data.
```{r}
library("skimr")
skim(candy)
```

> Q6. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?

*winpercent looks like its on a different scale, because it does not contain only values ranging from zero to one.*

> Q7. What do you think a zero and one represent for the candy$chocolate column?

```{r}
candy$chocolate
```
*I think it represents the different attritbutes of the candy, with "1" being yes and "0" being no (i.e. a "1" in the does it contain chocolate column means yes).*

A good place to start any exploratory analysis is with a histogram. You can do this most easily with the base R function `hist()`. Alternatively, you can use `ggplot()` with `geom_hist()`. Either works well in this case and (as always) its your choice.

> Q8. Plot a histogram of winpercent values

```{r}
library(ggplot2)

ggplot(candy) +
  aes(winpercent) +
  geom_histogram(binwidth=10)
```

> Q9. Is the distribution of winpercent values symmetrical?

*No*

> Q10. Is the center of the distribution above or below 50%?

*Below 50%*

> Q11. On average is chocolate candy higher or lower ranked than fruit candy?

```{r}
choc_winmean <- mean(candy$winpercent[as.logical(candy$chocolate)])
fruit_winmean <- mean(candy$winpercent[as.logical(candy$fruit)])
choc_winmean > fruit_winmean
```
*Chocolate is ranked higher on average*

> Q12. Is this difference statistically significant?

```{r}
choc_win <- candy$winpercent[as.logical(candy$chocolate)]
fruit_win <- candy$winpercent[as.logical(candy$fruit)]
t.test(choc_win, fruit_win)
```
*Since our p-value is less than 0.05, there is a statistically significant difference.*

## Overall Candy Rankings

Let’s use the base R `order()` function together with `head()` to sort the whole dataset by winpercent.

> Q13. What are the five least liked candy types in this set?

```{r}
library(dplyr)
candy %>% arrange(winpercent) %>% head(5)
```

> Q14. What are the top 5 all time favorite candy types out of this set?

```{r}
candy %>% arrange(winpercent) %>% tail(5)
```

> Q15. Make a first barplot of candy ranking based on winpercent values.

```{r}
ggplot(candy) + 
  aes(winpercent, rownames(candy)) +
  geom_col()
```
> Q16. This is quite ugly, use the reorder() function to get the bars sorted by winpercent?

```{r}
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) +
  geom_col()
```
Let’s setup a color vector (that signifies candy type) that we can then use for some future plots. We start by making a vector of all black values (one for each candy). Then we overwrite chocolate (for chocolate candy), brown (for candy bars) and red (for fruity candy) values.
```{r}
my_cols=rep("black", nrow(candy))
my_cols[as.logical(candy$chocolate)] = "chocolate"
my_cols[as.logical(candy$bar)] = "brown"
my_cols[as.logical(candy$fruity)] = "pink"
```

Now let’s try our barplot with these colors. Note that we use `fill=my_cols` for `geom_col()`. Experement to see what happens if you use `col=mycols`.
```{r}
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) +
  geom_col(fill=my_cols)
```
> Q17. What is the worst ranked chocolate candy?

*Nik L Nip*

> Q18. What is the best ranked fruity candy?

*Starburst*

## Taking a look at pricepercent

The pricepercent variable records the percentile rank of the candy’s price against all the other candies in the dataset. Lower vales are less expensive and high values more expensive.
```{r}
library(ggrepel)

# How about a plot of price vs win
ggplot(candy) +
  aes(winpercent, pricepercent, label=rownames(candy)) +
  geom_point(col=my_cols) + 
  geom_text_repel(col=my_cols, size=3.3, max.overlaps = 5)
```

> Q19. Which candy type is the highest ranked in terms of winpercent for the least money - i.e. offers the most bang for your buck?

```{r}
ordwin <- order(candy$winpercent, decreasing = TRUE)
head( candy[ordwin,c(11,12)], n=5 )
```

*Reese's Miniatures*

> Q20. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?

```{r}
ord <- order(candy$pricepercent, decreasing = TRUE)
head( candy[ord,c(11,12)], n=5 )
```
*Nik L Nip is the least popular*

> Q21. Make a barplot again with `geom_col()` this time using pricepercent and then improve this step by step, first ordering the x-axis by value and finally making a so called “dot chat” or “lollipop” chart by swapping `geom_col()` for `geom_point() + geom_segment()`.

```{r}
ggplot(candy) + 
  aes(pricepercent, reorder(rownames(candy),pricepercent)) +
  geom_col()
```
```{r}
# Make a lollipop chart of pricepercent
ggplot(candy) +
  aes(pricepercent, reorder(rownames(candy), pricepercent)) +
  geom_segment(aes(yend = reorder(rownames(candy), pricepercent), 
                   xend = 0), col="gray40") +
    geom_point()
```

## Exploring the Correlation Structure

Now that we’ve explored the dataset a little, we’ll see how the variables interact with one another. We’ll use correlation and view the results with the corrplot package to plot a correlation matrix.
```{r}
library(corrplot)

cij <- cor(candy)
corrplot(cij)
```
> Q22. Examining this plot what two variables are anti-correlated (i.e. have minus values)?

*The most anti-correlated variables on this plot are fruity and chocolate*

> Q23. Similarly, what two variables are most positively correlated?

*The most positively correlated variables are winpercent and chocolate.*

## Principal Component Analysis

Let’s apply PCA using the `prcomp()` function to our candy dataset remembering to set the scale=TRUE argument.
```{r}
pca <- prcomp(candy, scale=TRUE)
summary(pca)
```
Now we can plot our main PCA score plot of PC1 vs PC2.
```{r}
plot(pca$x[,1:2])
```
We can change the plotting character and add some color:
```{r}
plot(pca$x[,1:2], col=my_cols, pch=16)
```
We can make a much nicer plot with the ggplot2 package:
```{r}
# Make a new data-frame with our PCA results and candy data
my_data <- cbind(candy, pca$x[,1:3])

p <- ggplot(my_data) + 
        aes(x=PC1, y=PC2, 
            size=winpercent/100,  
            text=rownames(my_data),
            label=rownames(my_data)) +
        geom_point(col=my_cols)

p
```
We can use the ggrepel package and the function `ggrepel::geom_text_repel()` to label up the plot with non overlapping candy names like. We will also add a title and subtitle like so:
```{r}
p + geom_text_repel(size=3.3, col=my_cols, max.overlaps = 7)  + 
  theme(legend.position = "none") +
  labs(title="Halloween Candy PCA Space",
       subtitle="Colored by type: chocolate bar (dark brown), chocolate other (light brown), fruity (pink), other (black)",
       caption="Data from 538")
```

You can change the `max.overlaps` value to allow more overlapping labels or pass the ggplot object p to plotly like so to generate an interactive plot that you can mouse over to see labels:
```{r}
#library(plotly)

#ggplotly(p)
```

Take a quick look at PCA our loadings:
```{r}
par(mar=c(8,4,2,2))
barplot(pca$rotation[,1], las=2, ylab="PC1 Contribution")
```

> Q24. What original variables are picked up strongly by PC1 in the positive direction? Do these make sense to you?

*The positive strongest variables are fruity, hard, and pluribus. This means that these variables have the most influence in determining the degree to which people like these candies.*
