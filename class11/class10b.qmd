---
title: "Class 11: Comparative Analysis of Structures"
author: "Christopher Brockie (PID: A16280405)"
format: pdf
---

We need some packages for todays class. These include `bio3d` and `msa`.

The `msa` package is from BioConductor. These packages focus on genomics type work and are managed by the `BiocManager` package.

Install `install.packages("BiocManager")` and then `BiocManager::install("msa")` all entered in the R "brain" console.

```{r}
library(bio3d)

aa <- get.seq("1ake_A")
aa
```

> Q10. Which of the packages above is found only on BioConductor and not CRAN? 

**msa**

> Q11. Which of the above packages is not found on BioConductor or CRAN?

**devtools**

> Q12. True or False? Functions from the devtools package can be used to install packages from GitHub and BitBucket? 

**TRUE** 

> Q13. How many amino acids are in this sequence, i.e. how long is this sequence?

**214**

Now I can search the PDB database for related sequences:
```{r}
#b <- blast.pdb(aa)
```

```{r}
#hits <- plot(b)
```

These are the related structures in the PDB database that we found via a BLAST search...

```{r}
hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')
hits$pdb.id
```

Side-note: Lets annotate these structures (in other words find out what they are, what species they are from, stuff about the experiment they were solved in, etc.)

For this we can use the `pdb.annotate()` function

```{r}
anno <- pdb.annotate(hits$pdb.id)
```

```{r}
#attributes(anno)
#head(anno)
```

Now we can download all these structures for further analysis with the `get.pdb()` function.

```{r}
# Download releated PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
```

Now we have all these related structures we can Align and Supperpose...

```{r}
# Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
pdbs
```

## Principal Component Analysis

```{r}
# Perform PCA
pc.xray <- pca(pdbs)
plot(pc.xray)
```

```{r}
# Visualize first principal component
pc1 <- mktrj(pc.xray, pc=1, file="pc_1.pdb")
```


# Protein Structure Prediction with AlphaFold

![HIV monomer](molviewer_mono.png)

## Custom Analysis of Resulting Models

For tidiness we can move our AlphaFold results directory into our RStudio project directory. In this example my results are in the director `results_dir`
```{r}
results_dir <- "hivpr_dimer_23119/"
```

```{r}
# File names for all PDB models
pdb_files <- list.files(path=results_dir,
                        pattern="*.pdb",
                        full.names = TRUE)
pdb_files
```

```{r}
library(bio3d)

# Read all data from Models 
#  and superpose/fit coords
pdbs <- pdbaln(pdb_files, fit=TRUE, exefile="msa")
pdbs
```

Calculate the RMSD between all models.
```{r}
rd <- rmsd(pdbs)

range(rd)
```

Draw a heatmap of RMSD matrix values.
```{r}
library(pheatmap)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```

And a plot pLDDT values across all models.
```{r}
# Read a reference PDB structure
pdb <- read.pdb("1hsg")
```

You could optionally obtain secondary structure from a call to `stride()` or `dssp()` on any of the model structures.
```{r}
plotb3(pdbs$b, typ="l", lwd=2, sse=pdb)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")
```

We can improve the superposition/fitting of our models by finding the most consistent “rigid core” common across all the models. For this we will use the `core.find()` function:
```{r}
core <- core.find(pdbs)
```

We can use the identified core atom positions as a basis for a more suitable superposition:
```{r}
core.inds <- print(core, vol=0.5)
```

```{r}
xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")
```

The resulting superposed coordinates are written to a new director called corefit_structures/. We can now open these in Mol* and color by Uncertenty/Disorder (i.e. the B-factor column that contains the pLDDT scores):
![Core superposed HIV Dimer structures colored by B-factor i.e. pLDDT](molviwer_dimer.png)

Now we can update our RMSD analysis and examine the RMSF between positions of the structure:
```{r}
rd <- rmsd(xyz)
```

```{r}
# Change the names for easy reference
colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```
```{r}
rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")
```

## Predicted Alignment Error for Domains

Independent of the 3D structure, AlphaFold produces an output called *Predicted Aligned Error (PAE)*. This is detailed in the JSON format files, one for each model structure.

Below we read these files and see that AlphaFold produces a useful inter-domain prediction for model 1 but not for model 5:
```{r}
library(jsonlite)

# Listing of all PAE JSON files
pae_files <- list.files(path=results_dir,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
```

For example purposes lets read the 1st and 5th files
```{r}
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)
```

```{r}
# Per-residue pLDDT scores 
#  same as B-factor of PDB..
head(pae1$plddt) 
```

The maximum PAE values - we can see that model 5 is much worse than model 1. The lower the better.
```{r}
pae1$max_pae
pae5$max_pae
```

We can plot these with ggplot or with functions from the Bio3D package:
```{r}
library(bio3d)

plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)")
```
```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

We should really plot all of these using the same z range. Here is the model 1 plot again but this time using the same data range as the plot for model 5:
```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

## Residue Conservation from Alignment file

```{r}
aln_file <- list.files(path=results_dir,
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file
```

```{r}
aln <- read.fasta(aln_file[1], to.upper = TRUE)
```

How many sequences are in this alignment?
```{r}
dim(aln$ali)
```

We can score residue conservation in the alignment with the `conserv()` function.
```{r}
sim <- conserv(aln)
```

```{r}
plotb3(sim[1:99], sse=trim.pdb(pdb, chain="A"))
```

Note the conserved Active Site residues D25, T26, G27, A28.
```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq
```

For a final visualization we can map this conservation score to the Occupancy column of a PDB file for viewing in molecular viewer programs such as Mol*, PyMol, VMD, chimera etc.
```{r}
m1.pdb <- read.pdb(pdb_files[1])
occ <- vec2resno(c(sim[1:99], sim[1:99]), m1.pdb$atom$resno)
write.pdb(m1.pdb, o=occ, file="m1_conserv.pdb")
```

![Top ranked dimer model colored by sequence conservation. Conserved positions in a darker purple. The DTGA motif of one chain is highlighted in green](M1_CONSERV.PDB.png)
Note that we can now clearly see the central conserved active site in this model where the natural peptide substrate (and small molecule inhibitors) would bind between domains.

